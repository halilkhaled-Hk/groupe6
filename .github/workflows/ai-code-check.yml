name: AI Code Analysis

on: [push, pull_request]

jobs:
  analyze-code:
    runs-on: ubuntu-latest
    name: Analyze Project Structure
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3
      
    - name: üîç Advanced Code Analysis
      id: analysis
      run: |
        echo "ü§ñ D√âMARRAGE ANALYSE IA AVANC√âE"
        echo "D√©p√¥t: $GITHUB_REPOSITORY"
        echo "Commit: $GITHUB_SHA"
        echo "Branche: $GITHUB_REF"
        echo ""
        
        # Initialiser les variables pour le rapport
        HTML_STATUS=""
        JS_STATUS=""
        CSS_STATUS=""
        ERRORS_FOUND=0
        WARNINGS=0
        ANALYSIS_REPORT=""
        
        echo "=== STRUCTURE DU PROJET ==="
        PROJECT_STRUCTURE=$(ls -la)
        echo "$PROJECT_STRUCTURE"
        
        echo ""
        echo "=== ANALYSE D√âTAILL√âE DES FICHIERS ==="
        
        # Analyse des fichiers HTML
        echo "üåê ANALYSE HTML:"
        HTML_REPORT=""
        if [ -f "index.html" ]; then
          LINES=$(wc -l < index.html)
          SIZE=$(wc -c < index.html)
          if [ $LINES -lt 10 ]; then
            HTML_REPORT="$HTML_REPORT‚ùå index.html: TROP COURT ($LINES lignes)\n"
            ((ERRORS_FOUND++))
          else
            HTML_REPORT="$HTML_REPORT‚úÖ index.html: $LINES lignes, ${SIZE} octets\n"
          fi
        else
          HTML_REPORT="$HTML_REPORT‚ùå index.html: MANQUANT\n"
          ((ERRORS_FOUND++))
        fi
        
        if [ -f "about.html" ]; then
          LINES=$(wc -l < about.html)
          SIZE=$(wc -c < about.html)
          HTML_REPORT="$HTML_REPORT‚úÖ about.html: $LINES lignes, ${SIZE} octets\n"
        else
          HTML_REPORT="$HTML_REPORT‚ö†Ô∏è about.html: NON TROUV√â\n"
          ((WARNINGS++))
        fi
        
        # Analyse des fichiers JavaScript
        echo ""
        echo "‚ö° ANALYSE JAVASCRIPT:"
        JS_REPORT=""
        JS_FILES=("logic.js" "buttons.js" "history.js")
        for JS_FILE in "${JS_FILES[@]}"; do
          if [ -f "$JS_FILE" ]; then
            LINES=$(wc -l < "$JS_FILE")
            SIZE=$(wc -c < "$JS_FILE")
            if [ $LINES -eq 0 ]; then
              JS_REPORT="$JS_REPORT‚ùå $JS_FILE: FICHIER VIDE\n"
              ((ERRORS_FOUND++))
            elif [ $LINES -lt 5 ]; then
              JS_REPORT="$JS_REPORT‚ö†Ô∏è $JS_FILE: TR√àS COURT ($LINES lignes)\n"
              ((WARNINGS++))
            else
              JS_REPORT="$JS_REPORT‚úÖ $JS_FILE: $LINES lignes, ${SIZE} octets\n"
            fi
          else
            JS_REPORT="$JS_REPORT‚ùå $JS_FILE: MANQUANT\n"
            ((ERRORS_FOUND++))
          fi
        done
        
        # Analyse des fichiers CSS
        echo ""
        echo "üé® ANALYSE CSS:"
        CSS_REPORT=""
        CSS_FILES=("style.css" "theme.css")
        for CSS_FILE in "${CSS_FILES[@]}"; do
          if [ -f "$CSS_FILE" ]; then
            LINES=$(wc -l < "$CSS_FILE")
            SIZE=$(wc -c < "$CSS_FILE")
            if [ $LINES -eq 0 ]; then
              CSS_REPORT="$CSS_REPORT‚ùå $CSS_FILE: FICHIER VIDE\n"
              ((ERRORS_FOUND++))
            else
              CSS_REPORT="$CSS_REPORT‚úÖ $CSS_FILE: $LINES lignes, ${SIZE} octets\n"
            fi
          else
            CSS_REPORT="$CSS_REPORT‚ö†Ô∏è $CSS_FILE: NON TROUV√â\n"
            ((WARNINGS++))
          fi
        done
        
        # V√©rification des d√©pendances
        echo ""
        echo "üì¶ ANALYSE DES D√âPENDANCES:"
        DEPS_REPORT=""
        if [ -f "package.json" ]; then
          DEPS_REPORT="$DEPS_REPORT‚úÖ package.json: PR√âSENT\n"
          if [ -f "package-lock.json" ]; then
            DEPS_REPORT="$DEPS_REPORT‚úÖ package-lock.json: PR√âSENT\n"
          else
            DEPS_REPORT="$DEPS_REPORT‚ö†Ô∏è package-lock.json: MANQUANT\n"
            ((WARNINGS++))
          fi
        else
          DEPS_REPORT="$DEPS_REPORT‚ùå package.json: MANQUANT\n"
          ((ERRORS_FOUND++))
        fi
        
        # G√©n√©ration du rapport final
        ANALYSIS_REPORT="=== RAPPORT D'ANALYSE COMPLET ===\n\n"
        ANALYSIS_REPORT+="üìä STATISTIQUES:\n"
        ANALYSIS_REPORT+="‚Ä¢ Erreurs critiques: $ERRORS_FOUND\n"
        ANALYSIS_REPORT+="‚Ä¢ Avertissements: $WARNINGS\n"
        
        if [ $ERRORS_FOUND -eq 0 ]; then
          ANALYSIS_REPORT+="‚Ä¢ Statut: ‚úÖ SUCC√àS\n\n"
        else
          ANALYSIS_REPORT+="‚Ä¢ Statut: ‚ùå √âCHEC\n\n"
        fi
        
        ANALYSIS_REPORT+="üåê RAPPORT HTML:\n$HTML_REPORT\n"
        ANALYSIS_REPORT+="‚ö° RAPPORT JAVASCRIPT:\n$JS_REPORT\n"
        ANALYSIS_REPORT+="üé® RAPPORT CSS:\n$CSS_REPORT\n"
        ANALYSIS_REPORT+="üì¶ RAPPORT D√âPENDANCES:\n$DEPS_REPORT\n"
        
        ANALYSIS_REPORT+="=== ANALYSE TERMIN√âE ===\n"
        
        # Sauvegarder le rapport pour l'√©tape suivante
        echo "ANALYSIS_REPORT<<EOF" >> $GITHUB_OUTPUT
        echo -e "$ANALYSIS_REPORT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "ERRORS_FOUND=$ERRORS_FOUND" >> $GITHUB_OUTPUT
        echo "WARNINGS=$WARNINGS" >> $GITHUB_OUTPUT
        
        # Afficher le rapport dans les logs
        echo -e "$ANALYSIS_REPORT"

  send-report:
    runs-on: ubuntu-latest
    name: Send Analysis Report
    needs: analyze-code
    
    steps:
    - name: üìß Send Detailed Report
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "üìä Rapport d'Analyse IA - Commit ${{ github.sha }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: "GitHub AI Analyzer"
        body: |
          ü§ñ RAPPORT D'ANALYSE IA - ${{ github.repository }}
          
          üìã INFORMATIONS DU COMMIT:
          ‚Ä¢ D√©p√¥t: ${{ github.repository }}
          ‚Ä¢ Commit: ${{ github.sha }}
          ‚Ä¢ Branche: ${{ github.ref }}
          ‚Ä¢ Auteur: ${{ github.actor }}
          ‚Ä¢ Date: ${{ github.event.head_commit.timestamp }}
          ‚Ä¢ Lien: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
          
          ${{ needs.analyze-code.outputs.ANALYSIS_REPORT }}
          
          üìà R√âSUM√â EX√âCUTIF:
          ${{ needs.analyze-code.outputs.ERRORS_FOUND }} erreur(s) critique(s) d√©tect√©e(s)
          ${{ needs.analyze-code.outputs.WARNINGS }} avertissement(s)
          
          {% if needs.analyze-code.outputs.ERRORS_FOUND == 0 %}
          ‚úÖ CODE VALIDE - Pr√™t pour la production
          {% elif needs.analyze-code.outputs.ERRORS_FOUND == 1 %}
          ‚ö†Ô∏è PROBL√àMES MINEURS - V√©rification recommand√©e
          {% else %}
          ‚ùå PROBL√àMES CRITIQUES - Action requise
          {% endif %}
          
          Consultez les d√©tails complets sur: 
          https://github.com/${{ github.repository }}/actions
          
          Cordialement,
          Votre IA d'Analyse de Code ü§ñ